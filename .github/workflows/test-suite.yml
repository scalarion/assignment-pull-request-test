name: Test Suite

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

jobs:
  test-quality:
    name: Code Quality and Security
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Set up Go
        uses: actions/setup-go@v6
        with:
          go-version-file: go.mod
          cache: true

      - id: go
        name: Resolve Go version
        run: echo "go_version=$(go version)" >> $GITHUB_OUTPUT

      - name: Install dependencies
        run: go mod download

      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v8
        with:
          version: v2.4
          args: --timeout=5m

      - name: Create coverage directory
        run: mkdir -p coverage

      - name: Run comprehensive sanity checks
        run: make build check

      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage/
          retention-days: 7

  test-cross-platform:
    name: Cross-Platform Testing
    runs-on: ${{ matrix.os }}
    needs: test-quality
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: ubuntu-latest
            platform: Linux
          - os: windows-latest
            platform: Windows
          - os: macos-latest
            platform: macOS

    permissions:
      contents: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Set up Go
        uses: actions/setup-go@v6
        with:
          go-version-file: go.mod
          cache: true

      - name: Run tests (${{ matrix.platform }})
        run: |
          go mod download
          make test

      - name: Test action with dry-run (${{ matrix.platform }})
        uses: majikmate/assignment-pr-creator@main
        with:
          github-token: fake-token
          assignment-regex: >
            ^test/fixtures/assignments/(assignment-[\d]+)$,
            ^test/fixtures/bootcamp/(.+/assignment-[\w\-]+)$,
            ^test/fixtures/courses/(.+/assignment-[\w\-]+)$,
            ^test/fixtures/homework/(hw-[\d]+)$,
            ^test/fixtures/homework/(lab-[\d]+)$,
          default-branch: main
          dry-run: "yes"

      # Verify binary was created with correct extension
      - name: Verify binary created by action (${{ matrix.platform }})
        shell: bash
        run: |
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            test -f "./bin/assignment-pr-creator.exe" || (echo "Windows binary not found" && exit 1)
          else
            test -f "./bin/assignment-pr-creator" || (echo "Unix binary not found" && exit 1)
          fi
          echo "âœ… Binary verification passed for ${{ matrix.platform }}"
