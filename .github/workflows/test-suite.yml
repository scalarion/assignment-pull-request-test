name: Test Suite

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

jobs:
  test-quality:
    name: Code Quality and Security
    runs-on: ubuntu-latest
    if: false # Skip for now

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Set up Go
        uses: actions/setup-go@v6
        with:
          go-version-file: go.mod
          cache: true

      - id: go
        name: Resolve Go version
        run: echo "go_version=$(go version)" >> $GITHUB_OUTPUT

      - name: Install dependencies
        run: go mod download

      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v8
        with:
          version: v2.4
          args: --timeout=5m

      - name: Create coverage directory
        run: mkdir -p coverage

      - name: Run comprehensive sanity checks
        run: make build check

      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage/
          retention-days: 7

  test-cross-platform:
    name: Cross-Platform Testing
    runs-on: ${{ matrix.os }}
    # needs: test-quality
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: ubuntu-latest
            platform: Linux
          - os: windows-latest
            platform: Windows
          - os: macos-latest
            platform: macOS

    permissions:
      contents: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Set up Go
        uses: actions/setup-go@v6
        with:
          go-version-file: go.mod
          cache: true

      - name: Run tests (${{ matrix.platform }})
        run: |
          go mod download
          make test

      - name: Test action with dry-run (${{ matrix.platform }})
        uses: majikmate/assignment-pull-request@main
        with:
          github-token: fake-token
          assignment-regex: >
            ^test/fixtures/assignments/(assignment-[\d]+)$,
            ^test/fixtures/bootcamp/(.+/assignment-[\w\-]+)$,
            ^test/fixtures/courses/(.+/assignment-[\w\-]+)$,
            ^test/fixtures/homework/(hw-[\d]+)$,
            ^test/fixtures/homework/(lab-[\d]+)$,
          default-branch: main
          dry-run: "yes"

  test-repo:
    name: Real Scenario Test
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' # Only run on manual trigger

    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: Checkout action repository
        uses: actions/checkout@v5
        with:
          path: action-repo

      - name: Create or recreate test fork
        run: |
          # Delete existing fork if it exists
          if gh repo view majikmate/assignment-pull-request-test >/dev/null 2>&1; then
            echo "Deleting existing fork..."
            gh repo delete majikmate/assignment-pull-request-test --yes
          fi

          # Create fresh fork
          echo "Creating fresh fork..."
          gh repo fork majikmate/assignment-pull-request --repo-name assignment-pull-request-test --clone=false
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Clone test fork
        run: |
          gh repo clone majikmate/assignment-pull-request-test test-repo
          cd test-repo
          git config user.name "GitHub Actions Test"
          git config user.email "actions@github.com"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Test action in real mode
        uses: ./action-repo
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          assignment-regex: >
            ^test/fixtures/assignments/(assignment-[\d]+)$,
          default-branch: main
          dry-run: "no"
        env:
          GITHUB_REPOSITORY: majikmate/assignment-pull-request-test
        working-directory: ./test-repo

      - name: Verify results
        working-directory: ./test-repo
        run: |
          echo "🔍 Checking created branches..."
          git fetch --all
          git branch -a

          echo "🔍 Checking for created pull requests..."
          gh pr list --repo majikmate/assignment-pull-request-test

          echo "🔍 Checking git log..."
          git log --oneline --all --graph --max-count=20

          echo "✅ Real scenario test completed"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
